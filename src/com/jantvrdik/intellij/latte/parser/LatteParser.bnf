{
	parserClass="com.jantvrdik.intellij.latte.parser.LatteParser"
	parserUtilClass="com.jantvrdik.intellij.latte.parser.LatteParserUtil"

	extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

	psiClassPrefix="Latte"
	psiImplClassSuffix="Impl"
	psiPackage="com.jantvrdik.intellij.latte.psi"
	psiImplPackage="com.jantvrdik.intellij.latte.psi.impl"
	psiImplUtilClass="com.jantvrdik.intellij.latte.psi.impl.LattePsiImplUtil"

	elementTypeHolderClass="com.jantvrdik.intellij.latte.psi.LatteTypes"
	elementTypeClass="com.jantvrdik.intellij.latte.psi.LatteElementType"
	tokenTypeClass="com.jantvrdik.intellij.latte.psi.LatteTokenType"
}

root             ::= (structureToken)* autoClosedBlock?

// macro
private
macro            ::= macroComment | latteMacro

latteMacro        ::= macroClassic {
                            mixin="com.jantvrdik.intellij.latte.psi.impl.LatteMacroElementImpl"
                            implements="com.jantvrdik.intellij.latte.psi.LatteMacroElement"
                            methods=[getName setName getNameIdentifier]
                        }

macroComment     ::= T_MACRO_COMMENT
macroClassic     ::= <<checkPairMacro true>> (pairMacro | emptyMacro) | <<checkPairMacro false>> unpairedMacro {
                     	methods = [
                     		openTag="macroTag[0]"
                     		closeTag="macroTag[1]"
                     	]
                     }

private
pairMacro        ::= macroOpenTag structureToken* macroCloseTag

private
emptyMacro       ::= emptyMacroTag;

private
unpairedMacro    ::= macroOpenTag

fake
macroTag         ::= classicMacroContent {
                     	methods = [
                     		getMacroName
                     		macroContent="macroContent"
                     	]
                     }

macroOpenTag     ::= T_MACRO_OPEN_TAG_OPEN classicMacroContent T_MACRO_TAG_CLOSE {
                     	extends = macroTag
                     }
macroCloseTag    ::= T_MACRO_CLOSE_TAG_OPEN classicMacroContent T_MACRO_TAG_CLOSE {
                     	extends = macroTag
                     }
emptyMacroTag    ::= T_MACRO_OPEN_TAG_OPEN classicMacroContent T_MACRO_TAG_CLOSE_EMPTY {
                     	extends = macroTag
                     }


private
classicMacroContent     ::= macroName macroContent?

macroContent ::= macroArgs? (T_MACRO_MODIFIERS macroArgs)*

private
macroName        ::= T_MACRO_NAME
                   | T_MACRO_NOESCAPE? T_MACRO_SHORTNAME?

private
macroArgs        ::= (T_MACRO_ARGS | argsVar | argsVarType | T_MACRO_ARGS_STRING | T_MACRO_ARGS_NUMBER)+

argsVar        ::= T_MACRO_ARGS_VAR {
                        mixin="com.jantvrdik.intellij.latte.psi.impl.LatteVariableElementImpl"
                        implements="com.jantvrdik.intellij.latte.psi.LatteVariableElement"
                        methods=[getName setName getNameIdentifier getVariableName]
                    }

argsVarType        ::= T_MACRO_ARGS_VAR_TYPE {
                        mixin="com.jantvrdik.intellij.latte.psi.impl.LatteVariableTypeElementImpl"
                        implements="com.jantvrdik.intellij.latte.psi.LatteVariableTypeElement"
                        methods=[getName setName getNameIdentifier getVariableType]
                    }

// autoClosedBlock
autoClosedBlock  ::= &("{block" macroArgs? T_MACRO_MODIFIERS? "}") macroOpenTag structureToken*



// netteAttr
netteAttr        ::= T_HTML_TAG_NATTR_NAME T_WHITESPACE* (T_HTML_TAG_ATTR_EQUAL_SIGN netteAttrValue)? {
                        methods = [
                            attrName="T_HTML_TAG_NATTR_NAME"
                            attrValue="netteAttrValue"
                        ]
                     }

netteAttrValue   ::= T_HTML_TAG_ATTR_SQ macroContent? T_HTML_TAG_ATTR_SQ
                   | T_HTML_TAG_ATTR_DQ macroContent? T_HTML_TAG_ATTR_DQ
                   | macroContent?

outerHtml ::= T_TEXT;

// tokens sets
private
structureToken   ::= outerHtml | macro | netteAttr


private
topLevelTokens   ::= T_MACRO_CLASSIC T_MACRO_CONTENT topLevelTokens
